# -*- coding: utf-8 -*-
"""07_functions_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ifn3lgZbp_Pcl-ZmP8ryjrGNsw76cVVD

More Functions
===
Earlier we learned the most bare-boned versions of functions. In this section we will learn more general concepts about functions, such as how to use functions to return values, and how to pass different kinds of data structures between functions.

Valores de argumento por defecto
===
Cuando introdujimos funciones por primera vez, comenzamos con este ejemplo:
"""

def thank_you(name):
    # This function prints a two-line personalized thank you message.
    print("\nYou are doing good work, %s!" % name)
    print("Thank you very much for your efforts on this project.")
    
thank_you('Adriana')
thank_you('Carlos')
thank_you('María')

"""Esta función funciona bien, pero falla si no pasas un valor:"""

def thank_you(name):
    # This function prints a two-line personalized thank you message.
    print("\nYou are doing good work, %s!" % name)
    print("Thank you very much for your efforts on this project.")
    
thank_you('Adriana')
thank_you('Carlos')
thank_you('María')
thank_you()

"""That makes sense; the function needs to have a name in order to do its work, so without a name it is stuck.

If you want your function to do something by default, even if no information is passed to it, you can do so by giving your arguments default values. You do this by specifying the default values when you define the function:

Eso tiene sentido; la función debe tener un nombre para poder realizar su trabajo, por lo que sin un nombre se bloquea.

Si deseas que tu función haga algo de manera predeterminada, incluso si no se le pasa información, puedes hacerlo dando valores predeterminados a sus argumentos. Para ello, especifique los valores predeterminados cuando defina la función:
"""

def thank_you(name='everyone'):
    # This function prints a two-line personalized thank you message.
    #  If no name is passed in, it prints a general thank you message
    #  to everyone.
    print("\nYou are doing good work, %s!" % name)
    print("Thank you very much for your efforts on this project.")
    
thank_you('Adriana')
thank_you('Argenis')
thank_you('Lili')
thank_you()

"""This is particularly useful when you have a number of arguments in your function, and some of those arguments almost always have the same value. This allows people who use the function to only specify the values that are unique to their use of the function.

<a id="Exercises-default"></a>
Exercises
---
#### Games
- Write a function that accepts the name of a game and prints a statement such as, "I like playing chess!"
- Give the argument a default value, such as `chess`.
- Call your function at least three times. Make sure at least one of the calls includes an argument, and at least one call includes no arguments.

#### Favorite Movie
- Write a function that accepts the name of a movie, and prints a statement such as, "My favorite movie is The Princess Bride."
- Give the argument a default value, such as `The Princess Bride`.
- Call your function at least three times. Make sure at least one of the calls includes an argument, and at least one call includes no arguments.

Ejercicios
---
#### Juegos
- Escribe una función que acepte el nombre de un juego e imprima una declaración como, "¡Me gusta jugar al ajedrez!"
- Dale al argumento un valor predeterminado, como `ajedrez`.
- Llama a su función al menos tres veces. Asegúrate de que al menos una de las llamadas incluya un argumento, y al menos una llamada no incluya argumentos.

#### Película favorita
- Escribe una función que acepte el nombre de una película e imprima una declaración como, "Mi película favorita es Terminator".
- Dale al argumento un valor predeterminado, como 'Terminator'.
- Llama a su función al menos tres veces. Asegúrate de que al menos una de las llamadas incluya un argumento, y al menos una llamada no incluya argumentos.

Argumentos posicionales
===
Gran parte de lo que tendrás que aprender sobre el uso de funciones implica cómo pasar valores de su declaración de llamada a la función en sí. El ejemplo que acabamos de ver es bastante simple, ya que la función solo necesitaba un argumento para hacer su trabajo. Echemos un vistazo a una función que requiere dos argumentos para hacer su trabajo.

Hagamos una función simple que tome tres argumentos. Hagamos una función que tome el nombre y apellido de una persona, y luego imprima todo lo que sabe sobre la persona.

Aquí hay una implementación simple de esta función:
"""

def describe_person(first_name, last_name, age):
    # This function takes in a person's first and last name,
    #  and their age.
    # It then prints this information out in a simple format.
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    print("Age: %d\n" % age)

describe_person('brian', 'kernighan', 71)
describe_person('ken', 'thompson', 70)
describe_person('adele', 'goldberg', 68)

"""Los argumentos en esta función son `first_name`, `last_name` y `age`. Estos se denominan *argumentos posicionales* porque Python sabe qué valor asignar a cada uno por el orden en el que asigna los valores de la función. En la linea que llama

    describe_person('brian', 'kernighan', 71)

enviamos los valores *brian*, *kernighan* y *71* a la función. Python compara el primer valor *brian* con el primer argumento `first_name`. Coincide con el segundo valor *kernighan* con el segundo argumento `last_name`. Finalmente, compara el tercer valor *71* con el tercer argumento `age`.

Esto es bastante sencillo, pero significa que debemos asegurarnos de obtener los argumentos en el orden correcto. Si arruinamos el pedido, obtenemos resultados sin sentido o un error:
"""

describe_person?

def describe_person(first_name, last_name, age):
    """This function takes in a person's first and last name,
      and their age.
     It then prints this information out in a simple format."""
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    print("Age: %d\n" % age)

describe_person(71, 'brian', 'kernighan')
describe_person(70, 'ken', 'thompson')
describe_person(68, 'adele', 'goldberg')

"""Esto falla porque Python intenta hacer coincidir el valor 71 con el argumento `first_name`, el valor *brian* con el argumento` last_ name`, y el valor *kernighan* con el argumento 'edad'. Luego, cuando intenta imprimir el valor `first_name.title ()`, se da cuenta de que no puede usar el método `title()` en un entero.

Ejercicios
---
#### Colores favoritos
- Escribe una función que tome dos argumentos, el nombre de una persona y su color favorito. La función debe imprimir una declaración como "el color favorito de Hillary es el azul".
- Llama a su función tres veces, con una persona y un color diferentes cada vez.

#### Teléfonos
- Escribe una función que tome dos argumentos, una marca de teléfono y un nombre de modelo. La función debe imprimir una frase como "iPhone 6 Plus".
- Llama a su función tres veces, con una combinación diferente de marca y modelo cada vez.

Argumentos de palabras clave
===
Python nos permite usar una sintaxis llamada *keyword arguments*. En este caso, podemos dar los argumentos en cualquier orden cuando llamemos a la función, siempre y cuando utilicemos el nombre de los argumentos en nuestra declaración de llamada. Aquí es cómo se puede hacer que el código anterior funcione utilizando argumentos de palabras clave:
"""

def describe_person(first_name, last_name, age):
    # This function takes in a person's first and last name,
    #  and their age.
    # It then prints this information out in a simple format.
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    print("Age: %d\n" % age)

describe_person(age=71, first_name='brian', last_name='kernighan')
describe_person(age=70, first_name='ken', last_name='thompson')
describe_person(age=68, first_name='adele', last_name='goldberg')

"""Esto funciona, porque Python no tiene que hacer coincidir los valores con los argumentos por posición. Coincide con el valor 71 con el argumento `age`, porque el valor 71 está claramente marcado para ir con ese argumento. Esta sintaxis es un poco más de escritura, pero es un código muy legible.

Mezclando argumentos posicionales y palabras clave
---
Puede tener sentido a veces mezclar argumentos posicionales y palabras clave. En nuestro ejemplo anterior, podemos esperar que esta función siempre tome un nombre y un apellido. Antes de comenzar a mezclar argumentos posicionales y de palabras clave, agreguemos otra información a nuestra descripción de una persona. Volvamos también a usar solo argumentos posicionales por un momento:
"""

def describe_person(first_name, last_name, age, favorite_language):
    # This function takes in a person's first and last name,
    #  their age, and their favorite language.
    # It then prints this information out in a simple format.
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    print("Age: %d" % age)
    print("Favorite language: %s\n" % favorite_language)

describe_person('brian', 'kernighan', 71, 'C')
describe_person('ken', 'thompson', 70, 'Go')
describe_person('adele', 'goldberg', 68, 'Smalltalk')

"""Podemos esperar que cualquiera que use esta función proporcione un nombre y un apellido, en ese orden. Pero ahora estamos empezando a incluir cierta información que podría no aplicarse a todos. Podemos abordar esto manteniendo los argumentos posicionales para el nombre y el apellido, pero esperamos argumentos de palabras clave para todo lo demás. Podemos mostrar que esto funciona agregando algunas personas más y teniendo información diferente sobre cada persona:"""

###highlight=[2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26]
def describe_person(first_name, last_name, age=None, favorite_language=None, died=None):
    # This function takes in a person's first and last name,
    #  their age, and their favorite language.
    # It then prints this information out in a simple format.
    
    # Required information:
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    
    # Optional information:
    if age:
        print("Age: %d" % age)
    if favorite_language:
        print("Favorite language: %s" % favorite_language)
    if died:
        print("Died: %d" % died)
    
    # Blank line at end.
    print("\n")

describe_person('brian', 'kernighan', favorite_language='C')
describe_person('ken', 'thompson', age=70)
describe_person('adele', 'goldberg', age=68, favorite_language='Smalltalk')
describe_person('dennis', 'ritchie', favorite_language='C', died=2011)
describe_person('guido', 'van rossum', favorite_language='Python')

"""Todos necesitan un nombre y apellido, pero todo lo demás es opcional. Este código aprovecha la palabra clave `None` de Python, que actúa como un valor vacío para una variable. De esta manera, el usuario es libre de suministrar cualquiera de los valores "extra" que le interesan. No se muestran los argumentos que no reciben un valor. Python compara estos valores adicionales por nombre, en lugar de por posición. Esta es una forma muy común y útil de definir funciones.

Aceptando un número arbitrario de argumentos.
===
Ahora hemos visto que el uso de argumentos de palabras clave puede permitir declaraciones de llamadas mucho más flexibles.

- Esto te beneficia a ti en tus propios programas, ya que puedes escribir una función que pueda manejar muchas situaciones diferentes que pueda encontrar.
- Esto te beneficia si otros programadores usan sus programas, ya que tus funciones pueden aplicarse a una amplia gama de situaciones.
- Esto te beneficia cuando usa las funciones de otros programadores, porque sus funciones pueden aplicarse a muchas situaciones que te interesarán.

Sin embargo, hay otro problema que podemos abordar. Consideremos una función que toma dos números e imprime la suma de los dos números:
"""

def adder(num_1, num_2):
    # This function adds two numbers together, and prints the sum.
    sum = num_1 + num_2
    print("The sum of your numbers is %d." % sum)
    
# Let's add some numbers.
adder(1, 2)
adder(-1, 2)
adder(1, -2)

"""Esta función parece funcionar bien. Pero, ¿qué pasa si le pasamos tres números, que es una cosa perfectamente razonable para hacer matemáticamente?"""

###highlight=[8]
def adder(num_1, num_2):
    # This function adds two numbers together, and prints the sum.
    sum = num_1 + num_2
    print("The sum of your numbers is %d." % sum)
    
# Let's add some numbers.
adder(1, 2, 3)

"""Esta función falla, ya que no importa qué combinación de argumentos posicionales y de palabras clave usemos, la función solo está escrita, dos aceptan dos argumentos. De hecho, una función escrita de esta manera solo funcionará con *exactamente* dos argumentos.

Aceptando una secuencia de longitud arbitraria.
---
Python nos da una sintaxis para permitir que una función acepte un número arbitrario de argumentos. Si colocamos un argumento al final de la lista de argumentos, con un asterisco delante de él, ese argumento recopilará los valores restantes de la declaración de llamada en una tupla. Aquí hay un ejemplo que demuestra cómo funciona esto:
"""

def example_function(arg_1, arg_2, *arg_3):
    # Let's look at the argument values.
    print('\narg_1:', arg_1)
    print('arg_2:', arg_2)
    print('arg_3:', arg_3)
    
example_function(1, 2)
example_function(1, 2, 3)
example_function(1, 2, 3, 4)
example_function(1, 2, 3, 4, 5)

"""Puedes usar un bucle for para procesar estos otros argumentos:"""

###highlight=[6,7]
def example_function(arg_1, arg_2, *arg_3):
    # Let's look at the argument values.
    print('\narg_1:', arg_1)
    print('arg_2:', arg_2)
    for value in arg_3:
        print('arg_3 value:', value)

example_function(1, 2)
example_function(1, 2, 3)
example_function(1, 2, 3, 4)
example_function(1, 2, 3, 4, 5)

"""We can now rewrite the adder() function to accept two or more arguments, and print the sum of those numbers:

Ahora podemos reescribir la función `adder()` para aceptar dos o más argumentos, e imprimir la suma de esos números:
"""

a = 2
b = 3
suma = a+b

c = suma+1
c = c +1 
c

def adder(num_1, num_2, *nums):
    # This function adds the given numbers together,
    #  and prints the sum.
    
    # Start by adding the first two numbers, which
    #  will always be present.
    sum = num_1 + num_2
    
    # Then add any other numbers that were sent.
    for num in nums:
        sum = sum + num
        
    # Print the results.
    print("The sum of your numbers is %d." % sum)
    
# Let's add some numbers.
adder(1, 2, 3,4,5,6,7,1,2,1,2,4,5,1,2,3,5,5,1,2,3,21)

"""En esta nueva versión, Python hace lo siguiente:

- almacena el primer valor en la declaración de llamada en el argumento `num_1`;
- almacena el segundo valor en la declaración de llamada en el argumento `num_2`;
- almacena todos los demás valores en la declaración de llamada como una tupla en el argumento `nums`.

Luego podemos "descomprimir" estos valores, utilizando un bucle for. Podemos demostrar cuán flexible es esta función llamándola varias veces, con un número diferente de argumentos cada vez.
"""

###highlight=[19,20,21,22]
def adder(num_1, num_2, *nums):
    # This function adds the given numbers together,
    #  and prints the sum.
    
    # Start by adding the first two numbers, which
    #  will always be present.
    sum = num_1 + num_2
    
    # Then add any other numbers that were sent.
    for num in nums:
        sum = sum + num
        
    # Print the results.
    print("The sum of your numbers is %d." % sum)

    
# Let's add some numbers.
adder(1, 2)
adder(1, 2, 3)
adder(1, 2, 3, 4)
adder(1, 2, 3, 4, 5)

"""Aceptar un número arbitrario de argumentos de palabras clave
---
Python también proporciona una sintaxis para aceptar un número arbitrario de argumentos de palabras clave. La sintaxis se ve así:
"""

def example_function(arg_1, arg_2, **kwargs):
    # Let's look at the argument values.
    print('\narg_1:', arg_1)
    print('arg_2:', arg_2)
    print('arg_3:', kwargs)
    
example_function('a', 'b')
example_function('a', 'b', pollo='c')
example_function('a', 'b', value_3='c', value_4='d')
example_function('a', 'b', value_3='c', value_4='d', value_5='e')

"""El tercer argumento tiene dos asteriscos delante de él, que le dice a Python que recopile todos los argumentos de valor-clave restantes en la declaración de llamada. Este argumento se denomina comúnmente *kwargs*. Vemos en la salida que estos valores-clave se almacenan en un diccionario. Podemos recorrer este diccionario para trabajar con todos los valores que se pasan a la función:"""

###highlight=[6,7]
def example_function(arg_1, arg_2, **kwargs):
    # Let's look at the argument values.
    print('\narg_1:', arg_1)
    print('arg_2:', arg_2)
    for key, value in kwargs.items():
        print('arg_3 value:', value)
    
example_function('a', 'b')
example_function('a', 'b', value_3='c')
example_function('a', 'b', value_3='c', value_4='d')
example_function('a', 'b', value_3='c', value_4='d', value_5='e')

"""Anteriormente creamos una función que nos permite describir a una persona, y teníamos tres cosas que podríamos describir acerca de una persona. Podríamos incluir su edad, su idioma favorito y la fecha en que fallecieron. Pero esa fue la única información que pudimos incluir, porque era la única información que la función estaba preparada para manejar:"""

def describe_person(first_name, last_name, age=None, favorite_language=None, died=None):
    # This function takes in a person's first and last name,
    #  their age, and their favorite language.
    # It then prints this information out in a simple format.
    
    # Required information:
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    
    # Optional information:
    if age:
        print("Age: %d" % age)
    if favorite_language:
        print("Favorite language: %s" % favorite_language)
    if died:
        print("Died: %d" % died)
    
    # Blank line at end.
    print("\n")

describe_person('brian', 'kernighan', favorite_language='C')
describe_person('ken', 'thompson', age=70)
describe_person('adele', 'goldberg', age=68, favorite_language='Smalltalk')
describe_person('dennis', 'ritchie', favorite_language='C', died=2011)
describe_person('guido', 'van rossum', favorite_language='Python')

"""Podemos hacer esta función mucho más flexible al aceptar cualquier número de argumentos de palabras clave. Así es como se ve la función, usando la sintaxis para aceptar tantos argumentos de palabras clave como la persona que llama quiere proporcionar:"""

###highlight=[2,3,4,10,11,12]
def describe_person(first_name, last_name, **kwargs):
    # This function takes in a person's first and last name,
    #  and then an arbitrary number of keyword arguments.
    
    # Required information:
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    
    # Optional information:
    for key in kwargs:
        print("%s: %s" % (key.title(), kwargs[key]))
    
    # Blank line at end.
    print("\n")

describe_person('brian', 'kernighan', favorite_language='C')
describe_person('ken', 'thompson', age=70)
describe_person('adele', 'goldberg', age=68, favorite_language='Smalltalk')
describe_person('dennis', 'ritchie', favorite_language='C', died=2011)
describe_person('guido', 'van rossum', favorite_language='Python')

"""Esto es bastante bueno. Obtenemos la misma salida, y no tenemos que incluir un montón de pruebas para ver qué tipo de información se pasó a la función. Siempre requerimos un nombre y un apellido, pero más allá de eso, la persona que llama es libre de proporcionar cualquier par de palabra clave-valor para describir a una persona. Demostremos que se puede proporcionar cualquier tipo de información a esta función. También limpiamos la salida reemplazando los guiones bajos en las teclas con un espacio."""

###highlight=[12,17,18,19,20,21]
def describe_person(first_name, last_name, **kwargs):
    # This function takes in a person's first and last name,
    #  and then an arbitrary number of keyword arguments.
    
    # Required information:
    print("First name: %s" % first_name.title())
    print("Last name: %s" % last_name.title())
    
    # Optional information:
    for key in kwargs:
        print("%s: %s" % (key.title().replace('_', ' '), kwargs[key]))
    
    # Blank line at end.
    print("\n")

describe_person('brian', 'kernighan', favorite_language='C', famous_book='The C Programming Language')
describe_person('ken', 'thompson', age=70, alma_mater='UC Berkeley')
describe_person('adele', 'goldberg', age=68, favorite_language='Smalltalk')
describe_person('dennis', 'ritchie', favorite_language='C', died=2011, famous_book='The C Programming Language')
describe_person('guido', 'van rossum', favorite_language='Python', company='Dropbox')