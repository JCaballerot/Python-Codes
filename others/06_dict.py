# -*- coding: utf-8 -*-
"""06_dict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sbbkuCl5t_3lAh_LF_7Oauu2DLpWbtzR

Los diccionarios
===
Los diccionarios nos permiten almacenar bits de información conectados. Por ejemplo, puede guardar el nombre y la edad de una persona juntos.

¿Qué son los diccionarios?
===
Los diccionarios son una forma de almacenar información que está conectada de alguna manera. Los diccionarios almacenan información en pares *valor-clave*, de modo que cualquier información en un diccionario se conecta a al menos otra información.

Los diccionarios no almacenan su información en ningún orden en particular, por lo que es posible que no recupere su información en el mismo orden en que la ingresó.

Sintaxis general
---
Un diccionario general en Python se parece a esto:
"""

dictionary_name = {key_1: value_1, key_2: value_2, key_3: value_3}

"""Como las claves y los valores en los diccionarios pueden ser largos, a menudo escribimos solo un par clave-valor en una línea. Es posible que veas diccionarios que se parecen más a esto:"""

dictionary_name = {key_1: value_1,
                   key_2: value_2,
                   key_3: value_3,
                   }

"""Esto es un poco más fácil de leer, especialmente si los valores son largos.

Ejemplo
---
Un ejemplo simple implica modelar un diccionario real.
"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

"""Podemos obtener elementos individuales del diccionario, dando el nombre del diccionario y la clave entre llaves:"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

print("\nWord: {}".format('list'))
print("Meaning: %s" % python_words['list'])
      
print("\nWord: %s" % 'dictionary')
print("Meaning: %s" % python_words['dictionary'])

print("\nWord: %s" % 'function')
print("Meaning: %s" % python_words['function'])

"""Este código parece bastante repetitivo, y lo es. Los diccionarios tienen su propia sintaxis de bucle for, pero como hay dos tipos de información en los diccionarios, la estructura es un poco más complicada que para las listas. Aquí es cómo usar un bucle for con un diccionario:"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Print out the items in the dictionary.
for word, meaning in python_words.items():
    print("\nWord: %s" % word)
    print("Meaning: %s" % meaning)

"""La salida es idéntica, pero lo hicimos en 3 líneas en lugar de 6. Si tuviéramos 100 términos en nuestro diccionario, aún podríamos imprimirlos con solo 3 líneas.

La única parte difícil sobre el uso de bucles con diccionarios es averiguar cómo llamar a esas dos primeras variables. La sintaxis general para este bucle es:
"""

for key_name, value_name in dictionary_name.items():
    print(key_name) # The key is stored in whatever you called the first variable.
    print(value_name) # The value associated with that key is stored in your second variable.

"""Ejercicios
---
#### Nombres de mascotas
- Crear un diccionario para contener información sobre mascotas. Cada clave es el nombre de un animal, y cada valor es el tipo de animal.
    - Por ejemplo, 'perro': 'pez'
- Ponga al menos 3 pares clave-valor en su diccionario.
- Use un bucle for para imprimir una serie de declaraciones como "Willie es un perro".

#### Encuestando amigos
- Piensa en una pregunta que podrías hacerle a tus amigos. Crea un diccionario donde cada clave es el nombre de una persona y cada valor es la respuesta de esa persona a su pregunta.
- Almacena al menos tres respuestas en tu diccionario.
- Use un bucle for para imprimir una serie de declaraciones con el nombre de cada persona y su respuesta.

Operaciones comunes con diccionarios.
===
Hay algunas cosas comunes que querrás hacer con los diccionarios. Estos incluyen agregar nuevos pares clave-valor, modificar la información en el diccionario y eliminar elementos de los diccionarios.

Añadiendo nuevos pares clave-valor
---
Para agregar un nuevo par clave-valor, debes dar el nombre del diccionario seguido de la nueva clave entre llaves, y establecer que sea igual al nuevo valor. Mostraremos esto comenzando con un diccionario vacío y recreando el diccionario del ejemplo anterior.
"""

# Create an empty dictionary.
python_words = {} # or dict()

# Fill the dictionary, pair by pair.
python_words['list'] ='A collection of values that are not connected, but have an order.'
python_words['dictionary'] = 'A collection of key-value pairs.'
python_words['life meaning'] = 'Hard one.'

# Print out the items in the dictionary.
for word, meaning in python_words.items():
    print("\nWord: {}".format(word))
    print("Meaning: {}".format(meaning))

"""Modificar valores en un diccionario
---
En algún momento, es posible que desees modificar uno de los valores de su diccionario. Modificar un valor en un diccionario es bastante similar a modificar un elemento en una lista. Das el nombre del diccionario y luego la clave entre llaves, y establece que es igual al nuevo valor.
"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

print('dictionary: ' + python_words['dictionary'])
    
# Clarify one of the meanings.
python_words['dictionary'] = 'A collection of key-value pairs. Each key can be used to access its corresponding value.'

print('\ndictionary: ' + python_words['dictionary'])

"""Eliminando pares clave-valor
---
Es posible que desees eliminar algunos pares clave-valor de uno de sus diccionarios en algún momento. Puedes hacer esto usando el mismo comando `del` que aprendiste a usar con las listas. Para eliminar un par clave-valor, debe dar el comando `del`, seguido del nombre del diccionario, con la clave que desea eliminar. Esto elimina la clave y el valor como un par.
"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Show the current set of words and meanings.
print("\n\nThese are the Python words I know:")
for word, meaning in python_words.items():
    print("\nWord: %s" % word)
    print("Meaning: %s" % meaning)
    
# Remove the word 'list' and its meaning.
del python_words['list']

# Show the current set of words and meanings.
print("\n\nThese are the Python words I know:")
for word, meaning in python_words.items():
    print("\nWord: %s" % word)
    print("Meaning: %s" % meaning)

"""Si fueras a trabajar con este código, seguramente querría poner el código para mostrar el diccionario en una función. Veamos cómo se ve esto:"""

###highlight=[2,3,4,5,6,7,8,16,21]
def show_words_meanings(python_words):
    # This function takes in a dictionary of python words and meanings,
    #  and prints out each word with its meaning.
    print("\n\nThese are the Python words I know:")
    for word, meaning in python_words.items():
        print("\nWord: %s" % word)
        print("Meaning: %s" % meaning)
        

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

show_words_meanings(python_words)
    
# Remove the word 'list' and its meaning.
del python_words['list']

show_words_meanings(python_words)

"""Mientras tengamos una buena función de limpieza con la que trabajar, vamos a limpiar un poco nuestra salida:"""

###highlight=[7]
def show_words_meanings(python_words):
    # This function takes in a dictionary of python words and meanings,
    #  and prints out each word with its meaning.
    print("\n\nThese are the Python words I know:")
    for word, meaning in python_words.items():
        print("\n%s: %s" % (word, meaning))
        

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

show_words_meanings(python_words)
    
# Remove the word 'list' and its meaning.
del python_words['list']

show_words_meanings(python_words)

"""This is much more realistic code.

Modificar claves en un diccionario.
---
Modificar un valor en un diccionario fue sencillo, porque nada más depende del valor. Modificar una clave es un poco más difícil, porque cada tecla se usa para desbloquear un valor. Podemos cambiar una llave en dos pasos:

- Crear una nueva clave y copiar el valor en la nueva clave.
- Eliminar la clave anterior, que también elimina el valor anterior.

Usaremos un diccionario con un solo par clave-valor, para mantener las cosas simples.
"""

# We have a spelling mistake!
python_words = {'lisst': 'A collection of values that are not connected, but have an order.'}

# Create a new, correct key, and connect it to the old value.
#  Then delete the old key.
python_words['list'] = python_words['lisst']
del python_words['lisst']

# Print the dictionary, to show that the key has changed.
print(python_words)

"""Bucleando a través de un diccionario
===
Dado que los diccionarios realmente tratan sobre la conexión de bits de información, a menudo los usarás de las formas descritas anteriormente, donde agregas pares de clave-valor cada vez que recibe información nueva, y luego recupera los pares de clave-valor que le interesan. A veces, sin embargo, querrás recorrer todo el diccionario. Hay varias formas de hacerlo:

- Puedes recorrer todos los pares clave-valor;
- Puedes recorrer las teclas y extraer los valores de las teclas que le interesan;
- Puedes recorrer los valores.

Recorriendo todos los pares clave-valor
---
Este es el tipo de bucle que se mostró en el primer ejemplo. Así es como se ve este bucle, en un formato general:
"""

my_dict = {'key_1': 'value_1',
    'key_2': 'value_2',
    'key_3': 'value_3',
    }

for key, value in my_dict.items():
    print('\nKey: %s' % key)
    print('Value: %s' % value)

"""Esto funciona porque el método `.items ()` extrae todos los pares clave-valor de un diccionario en una lista de tuplas:"""

my_dict = {'key_1': 'value_1',
    'key_2': 'value_2',
    'key_3': 'value_3',
    }

print(my_dict.items())

"""La sintaxis `for key, value in my_dict.items():` hace el trabajo de recorrer en bucle a través de esta lista de tuplas, y extraer el primer y segundo elemento de cada tupla para nosotros.

No hay nada especial en ninguno de estos nombres de variables, por lo que el código Python que usa esta sintaxis se vuelve realmente legible. En lugar de crear un nuevo ejemplo de este bucle, veamos nuevamente el ejemplo original para ver esto en un contexto significativo:
"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

for word, meaning in python_words.items():
    print("\nWord: %s" % word)
    print("Meaning: %s" % meaning)

"""Recorriendo a través de todas las claves en un diccionario
---
Python proporciona una sintaxis clara para recorrer en bucle solo las teclas de un diccionario:
"""

my_dict = {'key_1': 'value_1',
    'key_2': 'value_2',
    'key_3': 'value_3',
    }

for key in my_dict.keys():
    print('Key: %s' % key)

"""Este es en realidad el comportamiento predeterminado de recorrer el propio diccionario. Así que puedes dejar de lado la parte `.keys ()` y obtener el mismo comportamiento:"""

###highlight=[7]
my_dict = {'key_1': 'value_1',
    'key_2': 'value_2',
    'key_3': 'value_3',
    }

for key in my_dict:
    print('Key: %s' % key)

"""La única ventaja de usar `.keys ()` en el código es un poco de claridad. Pero cualquiera que conozca Python razonablemente bien va a reconocer lo que hace la segunda versión. En el resto de nuestro código, omitiremos `.keys ()` cuando queramos este comportamiento.

Puede extraer el valor de cualquier clave que le interese dentro de su bucle, usando la notación estándar para acceder a un valor de diccionario desde una clave:
"""

###highlight=[9,10]
my_dict = {'key_1': 'value_1',
    'key_2': 'value_2',
    'key_3': 'value_3',
    }

for key in my_dict:
    print('Key: %s' % key)
    if key == 'key_2':
        print("  The value for key_2 is %s." % my_dict[key])

"""Vamos a mostrar cómo podemos usar esto en nuestro programa de palabras de Python. Este tipo de bucle proporciona una forma sencilla de mostrar solo las palabras en el diccionario:"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Show the words that are currently in the dictionary.
print("The following Python words have been defined:")
for word in python_words:
    print("- %s" % word)

"""Podemos extender esto ligeramente para hacer un programa que le permita buscar palabras. Primero dejamos que el usuario elija una palabra. Cuando el usuario ha elegido una palabra, obtenemos el significado de esa palabra y la mostramos:"""

###highlight=[12,13,14]
python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Show the words that are currently in the dictionary.
print("The following Python words have been defined:")
for word in python_words:
    print("- %s" % word)
    
# Allow the user to choose a word, and then display the meaning for that word.
requested_word = raw_input("\nWhat word would you like to learn about? ")
print("\n%s: %s" % (requested_word, python_words[requested_word]))

"""Esto permite al usuario seleccionar una palabra que se ha definido. Si encerramos la parte de entrada del programa en un bucle while, el usuario puede ver todas las definiciones que desee:"""

###highlight=[12,13,14,15,16,17,18,19,20]
python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Show the words that are currently in the dictionary.
print("The following Python words have been defined:")
for word in python_words:
    print("- %s" % word)

requested_word = ''
while requested_word != 'quit':
    # Allow the user to choose a word, and then display the meaning for that word.
    requested_word = raw_input("\nWhat word would you like to learn about? (or 'quit') ")
    if requested_word in python_words.keys():
        print("\n  %s: %s" % (requested_word, python_words[requested_word]))
    else:
        # Handle misspellings, and words not yet stored.
        print("\n  Sorry, I don't know that word.")

"""Esto permite que el usuario solicite tantos significados como desee, pero toma la palabra "quit" como palabra solicitada. Agreguemos una cláusula `elif` para limpiar este comportamiento:"""

###highlight=[16,17,18,19,20,21,22,23,24]
python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Show the words that are currently in the dictionary.
print("The following Python words have been defined:")
for word in python_words:
    print("- %s" % word)

requested_word = ''
while requested_word != 'quit':
    # Allow the user to choose a word, and then display the meaning for that word.
    requested_word = raw_input("\nWhat word would you like to learn about? (or 'quit') ")
    if requested_word in python_words.keys():
        # This is a word we know, so show the meaning.
        print("\n  %s: %s" % (requested_word, python_words[requested_word]))
    elif requested_word != 'quit':
        # This is not in python_words, and it's not 'quit'.
        print("\n  Sorry, I don't know that word.")
    else:
        # The word is quit.
        print("\n  Bye!")

"""Recorriendo todos los valores en un diccionario
---
Python proporciona una sintaxis sencilla para recorrer en bucle todos los valores de un diccionario, así como:
"""

my_dict = {'key_1': 'value_1',
    'key_2': 'value_2',
    'key_3': 'value_3',
    }

for value in my_dict.values():
    print('Value: %s' % value)

"""Podemos usar esta sintaxis de bucle para divertirnos un poco con el ejemplo del diccionario, haciendo un pequeño programa de preguntas. El programa mostrará un significado y le pedirá al usuario que adivine la palabra que coincide con ese significado. Comencemos mostrando todos los significados en el diccionario:"""

python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

for meaning in python_words.values():
    print("Meaning: %s" % meaning)

"""Ahora podemos agregar un mensaje después de cada significado, pidiéndole al usuario que adivine la palabra:"""

a = input("Please write something: ")

a

###highlight=[12,13,14,15,16,17,18]
python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Print each meaning, one at a time, and ask the user
#  what word they think it is.
for meaning in python_words.values():
    print("\nMeaning: %s" % meaning)
    
    guessed_word = input("What word do you think this is? ")
    
    # The guess is correct if the guessed word's meaning matches the current meaning.
    if python_words[guessed_word] == meaning:
        print("You got it!")
    else:
        print("Sorry, that's just not the right word.")

"""Esto está empezando a funcionar, pero podemos ver en la salida que el usuario no tiene la oportunidad de hacer una segunda suposición si adivina mal por algún significado. Podemos usar un bucle while alrededor del código de adivinación, para permitir que el usuario adivine hasta que lo haga correctamente:"""

###highlight=[12,13,14,15,16,17,18,19,20,21,22]
python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

# Print each meaning, one at a time, and ask the user
#  what word they think it is.
for meaning in python_words.values():
    print("\nMeaning: %s" % meaning)
    
    # Assume the guess is not correct; keep guessing until correct.
    correct = False
    while not correct:
        guessed_word = input("\nWhat word do you think this is? ")
    
        # The guess is correct if the guessed word's meaning matches the current meaning.
        if python_words[guessed_word] == meaning:
            print("You got it!")
            correct = True
        else:
            print("Sorry, that's just not the right word.")

"""Este es mejor. Ahora, si la suposición es incorrecta, el usuario se ve atrapado en un bucle al que solo puede salir al adivinar correctamente. La revisión final de este código es mostrar al usuario una lista de palabras para elegir cuando se les pide que adivinen:"""

###highlight=[7,8,9,10,11,12,23,24,25]
python_words = {'list': 'A collection of values that are not connected, but have an order.',
                'dictionary': 'A collection of key-value pairs.',
                'function': 'A named set of instructions that defines a set of actions in Python.',
                }

def show_words(python_words):
    # A simple function to show the words in the dictionary.
    display_message = ""
    for word in python_words.keys():
        display_message += word + '  '
    print(display_message)

# Print each meaning, one at a time, and ask the user
#  what word they think it is.
for meaning in python_words.values():
    print("\n%s" % meaning)

    # Assume the guess is not correct; keep guessing until correct.
    correct = False
    while not correct:
        
        print("\nWhat word do you think this is?")
        show_words(python_words)
        guessed_word = input("- ")    
        
        # The guess is correct if the guessed word's meaning matches the current meaning.
        if python_words[guessed_word] == meaning:
            print("You got it!")
            correct = True
        else:
            print("Sorry, that's just not the right word.")

"""Anidamiento
===
Anidar es uno de los conceptos más poderosos a los que hemos llegado hasta ahora. Anidar implica colocar una lista o diccionario dentro de otra lista o diccionario. Aquí veremos dos ejemplos, listas dentro de un diccionario y diccionarios dentro de un diccionario. Con el anidamiento, el tipo de información que podemos modelar en nuestros programas se amplía enormemente.

Listas en un diccionario
---
Un diccionario conecta dos piezas de información. Esos dos elementos de información pueden ser cualquier tipo de estructura de datos en Python. Sigamos usando cadenas para nuestras claves, pero intentemos dar una lista como valor.

El primer ejemplo incluirá almacenar los números favoritos de varias personas. Las claves están formadas por nombres de personas y los valores son listas de los números favoritos de cada persona. En este primer ejemplo, accederemos a la lista de cada persona de una en una.
"""

# This program stores people's favorite numbers, and displays them.
favorite_numbers = {'eric': {"hola":[1,2,3,4]},
                    'ever': [2, 4, 5],
                    'willie': [5, 35, 120],
                    }

# Display each person's favorite numbers.
print("Eric's favorite numbers are:")
print(favorite_numbers['eric'])

print("\nEver's favorite numbers are:")
print(favorite_numbers['ever'])

print("\nWillie's favorite numbers are:")
print(favorite_numbers['willie'])

"""Realmente estamos trabajando en cada clave del diccionario, así que usemos un bucle for para revisar las claves del diccionario:"""

###highlight=[8,9,10,11]
# This program stores people's favorite numbers, and displays them.
favorite_numbers = {'eric': [3, 11, 19, 23, 42],
                    'ever': [2, 4, 5],
                    'willie': [5, 35, 120],
                    }

# Display each person's favorite numbers.
for name in favorite_numbers:
    print("\n%s's favorite numbers are:" % name.title())
    print(favorite_numbers[name])

"""Esta estructura es bastante compleja, así que no te preocupes si las cosas tardan un poco en asimilarse. El diccionario en sí probablemente tenga sentido; Cada persona está conectada a una lista de sus números favoritos.

Esto funciona, pero preferimos no imprimir Python en bruto en nuestra salida. Usemos un bucle for para imprimir los números favoritos individualmente, en lugar de en una lista de Python.
"""

###highlight=[11,12,13,14]
# This program stores people's favorite numbers, and displays them.
favorite_numbers = {'eric': [3, 11, 19, 23, 42],
                    'ever': [2, 4, 5],
                    'willie': [5, 35, 120],
                    }

# Display each person's favorite numbers.
for name in favorite_numbers:
    print("\n%s's favorite numbers are:" % name.title())
    # Each value is itself a list, so we need another for loop
    #  to work with the list.
    for favorite_number in favorite_numbers[name]:
        print(favorite_number)

"""Things get a little more complicated inside the for loop. The value is a list of favorite numbers, so the for loop pulls each *favorite\_number* out of the list one at a time. If it makes more sense to you, you are free to store the list in a new variable, and use that to define your for loop:

Las cosas se complican un poco más dentro del bucle for. El valor es una lista de números favoritos, por lo que el bucle for saca cada *favorite_number* de la lista uno a la vez. Si tiene más sentido para ti, puedes almacenar la lista en una nueva variable y usarla para definir su bucle for:
"""

###highlight=[12,13,14,15]
# This program stores people's favorite numbers, and displays them.
favorite_numbers = {'eric': [3, 11, 19, 23, 42],
                    'ever': [2, 4, 5],
                    'willie': [5, 35, 120],
                    }

# Display each person's favorite numbers.
for name in favorite_numbers:
    print("\n%s's favorite numbers are:" % name.title())
    
    # Each value is itself a list, so let's put that list in a variable.
    current_favorite_numbers = favorite_numbers[name]
    for favorite_number in current_favorite_numbers:
        print(favorite_number)

"""Diccionarios en un diccionario
---
El concepto de anidamiento más poderoso que cubriremos ahora es anidar un diccionario dentro de un diccionario.

Para demostrar esto, hagamos un diccionario de mascotas, con alguna información sobre cada mascota. Las claves de este diccionario consistirán en el nombre de la mascota. Los valores incluirán información como el tipo de animal, el propietario y si la mascota ha sido vacunada.
"""

# This program stores information about pets. For each pet,
#   we store the kind of animal, the owner's name, and
#   the breed.
pets = {'willie': {'kind': 'dog', 'owner': 'eric', 'vaccinated': True},
        'walter': {'kind': 'cockroach', 'owner': 'eric', 'vaccinated': False},
        'peso': {'kind': 'dog', 'owner': 'chloe', 'vaccinated': True},
        }

# Let's show all the information for each pet.
print("Here is what I know about Willie:")
print("kind: " + pets['willie']['kind'])
print("owner: " + pets['willie']['owner'])
print("vaccinated: " + str(pets['willie']['vaccinated']))

print("\nHere is what I know about Walter:")
print("kind: " + pets['walter']['kind'])
print("owner: " + pets['walter']['owner'])
print("vaccinated: " + str(pets['walter']['vaccinated']))

print("\nHere is what I know about Peso:")
print("kind: " + pets['peso']['kind'])
print("owner: " + pets['peso']['owner'])
print("vaccinated: " + str(pets['peso']['vaccinated']))

"""Clearly this is some repetitive code, but it shows exactly how we access information in a nested dictionary. In the first set of `print` statements, we use the name 'willie' to unlock the 'kind' of animal he is, the 'owner' he has, and whether or not he is 'vaccinated'. We have to wrap the vaccination value in the `str` function so that Python knows we want the words 'True' and 'False', not the values `True` and `False`. We then do the same thing for each animal.

Let's rewrite this program, using a for loop to go through the dictionary's keys:

Claramente, este es un código repetitivo, pero muestra exactamente cómo accedemos a la información en un diccionario anidado. En el primer conjunto de declaraciones "impresas", usamos el nombre "willie" para desbloquear el "tipo" de animal que es, el "dueño" que tiene y si está "vacunado" o no. Tenemos que ajustar el valor de vacunación en la función `str` para que Python sepa que queremos las palabras 'Verdadero' y 'Falso', no los valores 'Verdadero' y 'Falso'. Entonces hacemos lo mismo para cada animal.

Reescribamos este programa, usando un bucle for para pasar por las claves del diccionario:
"""

# This program stores information about pets. For each pet,
#   we store the kind of animal, the owner's name, and
#   the breed.
pets = {'willie': {'kind': 'dog', 'owner': 'eric', 'vaccinated': True},
        'walter': {'kind': 'cockroach', 'owner': 'eric', 'vaccinated': False},
        'peso': {'kind': 'dog', 'owner': 'chloe', 'vaccinated': True},
        }

# Let's show all the information for each pet.
for pet_name, pet_information in pets.items():
    print("\nHere is what I know about %s:" % pet_name.title())
    print("kind: " + pet_information['kind'])
    print("owner: " + pet_information['owner'])
    print("vaccinated: " + str(pet_information['vaccinated']))

"""Este código es mucho más corto y fácil de mantener. Pero incluso este código no se mantendrá al día con nuestro diccionario. Si agregamos más información al diccionario más adelante, tendremos que actualizar nuestros estados de cuenta impresos. Pongamos un segundo bucle for dentro del primer bucle para ejecutar toda la información sobre cada mascota:"""

###highlight=[14,15]
# This program stores information about pets. For each pet,
#   we store the kind of animal, the owner's name, and
#   the breed.
pets = {'willie': {'kind': 'dog', 'owner': 'eric', 'vaccinated': True},
        'walter': {'kind': 'cockroach', 'owner': 'eric', 'vaccinated': False},
        'peso': {'kind': 'dog', 'owner': 'chloe', 'vaccinated': True},
        }

# Let's show all the information for each pet.
for pet_name, pet_information in pets.items():
    print("\nHere is what I know about %s:" % pet_name.title())
    # Each animal's dictionary is in 'information'
    for key in pet_information:
        print(key + ": " + str(pet_information[key]))

"""Este bucle anidado puede parecer bastante complicado, así que, una vez más, no se preocupe si no tiene sentido por un tiempo.

- El primer bucle nos da todas las claves en el diccionario principal, que consisten en el nombre de cada mascota.
- Cada uno de estos nombres se puede usar para "desbloquear" el diccionario de cada mascota.
- El bucle interno recorre el diccionario para esa mascota individual y extrae todas las claves del diccionario de esa mascota individual.
- Imprimimos la clave, que nos indica el tipo de información que estamos a punto de ver y el valor de esa clave.
- Puedes ver que podríamos mejorar el formato en la salida.
    - Podríamos escribir con mayúscula el nombre del propietario.
    - Podríamos imprimir 'sí' o 'no', en lugar de Verdadero y Falso.
    
Vamos a mostrar una última versión que usa algunas declaraciones if para limpiar nuestros datos para imprimir:
"""

# This program stores information about pets. For each pet,
#   we store the kind of animal, the owner's name, and
#   the breed.
pets = {'willie': {'kind': 'dog', 'owner': 'eric', 'vaccinated': True},
        'walter': {'kind': 'cockroach', 'owner': 'eric', 'vaccinated': False},
        'peso': {'kind': 'dog', 'owner': 'chloe', 'vaccinated': True},
        }

# Let's show all the information for each pet.
for pet_name, pet_information in pets.items():
    print("\nHere is what I know about %s:" % pet_name.title())
    # Each animal's dictionary is in pet_information
    for key in pet_information:
        if key == 'owner':
            # Capitalize the owner's name.
            print(key + ": " + pet_information[key].title())
        elif key == 'vaccinated':
            # Print 'yes' for True, and 'no' for False.
            vaccinated = pet_information['vaccinated']
            if vaccinated:
                print('vaccinated: yes')
            else:
                print('vaccinated: no')
        else:
            # No special formatting needed for this key.
            print(key + ": " + pet_information[key])

"""This code is a lot longer, and now we have nested if statements as well as nested for loops. But keep in mind, this structure would work if there were 1000 pets in our dictionary, and it would work if we were storing 1000 pieces of information about each pet. One level of nesting lets us model an incredible array of information.

Este código es mucho más largo, y ahora hemos anidado declaraciones if y anidados para bucles. Pero tenga en cuenta que esta estructura funcionaría si hubiera 1000 mascotas en nuestro diccionario, y funcionaría si almacenáramos 1000 piezas de información sobre cada mascota. Un nivel de anidamiento nos permite modelar una increíble variedad de información.

Una nota importante sobre la anidación.
---
Si bien un nivel de anidamiento es realmente útil, el anidar mucho más profundo que eso se vuelve realmente complicado, realmente rápido. Existen otras estructuras, como clases, que pueden ser incluso más útiles para modelar información. Además de esto, podemos usar Python para almacenar información en una base de datos, que es la herramienta adecuada para almacenar información profundamente anidada.

Muchas veces, cuando almacena información en una base de datos, extrae un pequeño conjunto de esa información y la coloca en un diccionario, o en una estructura ligeramente anidada, y luego trabaja con ella. Pero rara vez, si acaso, trabajará con estructuras de datos de Python anidadas con más de un nivel de profundidad.
"""